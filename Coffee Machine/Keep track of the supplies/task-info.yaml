type: edu
files:
- name: src/machine/Main.kt
  visible: true
  text: "package machine\n\nconst val WATER_CUP_ESPRESSO = 250\nconst val WATER_CUP_LATTE\
    \ = 350\nconst val WATER_CUP_CAPPUCCINO = 200\nconst val WATER_CUP = 200\nconst\
    \ val MILK_CUP_LATTE = 75\nconst val MILK_CUP_CAPPUCCINO = 100\nconst val MILK_CUP\
    \ = 50\nconst val BEANS_CUP_ESPRESSO = 16\nconst val BEANS_CUP_LATTE= 20\nconst\
    \ val BEANS_CUP_CAPPUCCINO = 12\nconst val BEANS_CUP = 15\nconst val PRICE_ESPRESSO\
    \ = 4\nconst val PRICE_LATTE = 7\nconst val PRICE_CAPPUCCINO = 6\nconst val WATER\
    \ = 400\nconst val MILK = 540\nconst val BEANS = 120\nconst val MONEY = 550\n\
    const val CUPS = 9\n\n\nfun main() {\n\n   startCoffeeMachine()\n}\n\nfun coffeeProcessText()\
    \ {\n    println(\n        \"\"\"\nStarting to make a coffee\nGrinding coffee\
    \ beans\nBoiling water\nMixing boiled water with crushed coffee beans\nPouring\
    \ coffee into the cup\nPouring some milk into the cup\nCoffee is ready!\n    \"\
    \"\"\n    )\n}\n\nfun ingredientCalculatorCoffee() {\n\n    println(\"Write how\
    \ many cups of coffee you wil need\")\n    val cups = readLine()!!.toInt()\n \
    \   println(\"For $cups cups of coffee you will need:\")\n    println(\"${WATER_CUP\
    \ * cups} ml of water\")\n    println(\"${MILK_CUP * cups} ml of milk\")\n   \
    \ println(\"${BEANS_CUP * cups} g of coffee beans\")\n\n\n}\n\nfun numberOfServings()\
    \ {\n    println(\"Write how many ml of water the coffee machine has:\")\n   \
    \ val waterUser = readLine()!!.toInt()\n    println(\"Write how many ml of milk\
    \ the coffee machine has:\")\n    val milkUser = readLine()!!.toInt()\n    println(\"\
    Write how many grams of coffee beans the coffee machine has:\")\n    val beansUser\
    \ = readLine()!!.toInt()\n    println(\"Write how many cups of coffee you will\
    \ need:\")\n    val cupsUser = readLine()!!.toInt()\n    val cupsInMachine = listOf<Int>(waterUser,\
    \ milkUser, beansUser).minOrNull()\n    if (cupsUser == cupsInMachine) {\n   \
    \     println(\"Yes, I can make that amount of coffee\")\n    } else if (cupsUser\
    \ > cupsInMachine!!) {\n        println(\"No, I can make only $cupsInMachine cups\
    \ of coffee\")\n    } else if (cupsUser < cupsInMachine) {\n        println(\"\
    Yes, I can make that amount of coffee (and even ${cupsInMachine - cupsUser} more\
    \ than that)\")\n    }\n\n}\n\nfun startCoffeeMachine() {\n    println(\"\"\"\n\
    \        The coffee machine has:\n        $WATER ml of water\n        $MILK ml\
    \ of milk\n        $BEANS g of coffee beans\n        $CUPS disposable cups\n \
    \       ${'$'}$MONEY of money\n\n        Write action (buy, fill, take): \n  \
    \  \"\"\".trimIndent())\n\n    val action = readLine()\n    when(action) {\n \
    \       \"buy\" -> buyCoffee()\n        \"fill\" -> fillCoffeeMachine()\n    \
    \    \"take\" -> takeMoney()\n           else -> startCoffeeMachine()\n    }\n\
    }\n\nfun takeMoney() {\n    println(\"\"\"\n        I gave you ${'$'}$MONEY\n\n\
    \        The coffee machine has:\n        $WATER ml of water\n        $MILK ml\
    \ of milk\n        $BEANS g of coffee beans\n        $CUPS disposable cups\n \
    \       ${'$'}0 of money\n    \"\"\".trimIndent())\n}\n\nfun fillCoffeeMachine()\
    \ {\n    println(\"Write how many ml of water do you want to add:\")\n    val\
    \ addWater = readLine()!!.toInt()\n    println(\"Write how many ml of milk do\
    \ you want to add:\")\n    val addMilk = readLine()!!.toInt()\n    println(\"\
    Write how many grams of coffee beans do you want to add:\")\n    val addBeans\
    \ = readLine()!!.toInt()\n    println(\"Write how many disposable cups of coffee\
    \ do you want to add:\")\n    val addCups = readLine()!!.toInt()\n    println(\"\
    \"\"\n        The coffee machine has:\n        ${WATER + addWater} ml of water\n\
    \        ${MILK + addMilk} ml of milk\n        ${BEANS + addBeans} g of coffee\
    \ beans\n        ${CUPS + addCups} disposable cups\n        ${'$'}$MONEY of money\n\
    \    \"\"\".trimIndent())\n\n}\n\nfun buyCoffee() {\n    println(\"What do you\
    \ want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:\")\n    val  selectCoffee\
    \ = readLine()!!.toInt()\n    when(selectCoffee) {\n        1 -> println(\"\"\"\
    \n            The coffee machine has:\n            ${WATER - WATER_CUP_ESPRESSO}\
    \ ml of water\n            $MILK ml of milk\n            ${BEANS - BEANS_CUP_ESPRESSO}\
    \ g of coffee beans\n            ${CUPS - 1} disposable cups\n            ${'$'}${MONEY\
    \ + PRICE_ESPRESSO} of money\n        \"\"\".trimIndent())\n        2 -> println(\"\
    \"\"\n            The coffee machine has:\n            ${WATER - WATER_CUP_LATTE}\
    \ ml of water\n            ${MILK - MILK_CUP_LATTE} ml of milk\n            ${BEANS\
    \ - BEANS_CUP_LATTE} g of coffee beans\n            ${CUPS - 1} disposable cups\n\
    \            ${'$'}${MONEY + PRICE_LATTE} of money\n        \"\"\".trimIndent())\n\
    \        3 -> println(\"\"\"\n            The coffee machine has:\n          \
    \  ${WATER - WATER_CUP_CAPPUCCINO} ml of water\n            ${MILK - MILK_CUP_CAPPUCCINO}\
    \ ml of milk\n            ${BEANS - BEANS_CUP_CAPPUCCINO} g of coffee beans\n\
    \            ${CUPS - 1} disposable cups\n            ${'$'}${MONEY + PRICE_CAPPUCCINO}\
    \ of money\n        \"\"\".trimIndent())\n\n\n    }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return Arrays.asList(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5663#comment
status: Solved
record: 4
